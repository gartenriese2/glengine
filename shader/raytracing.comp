#version 430 core

layout(local_size_x = 16, local_size_y = 16) in;

uniform int windowWidth;
uniform int windowHeight;
uniform int numObj;
uniform int numTri;

uniform sampler2D positionTex;
uniform sampler2D directionTex;

layout (r11f_g11f_b10f, binding = 2) uniform image2D outputTexture;

struct Ray {
	vec3 origin;
	vec3 dir;
};

struct Tri {
	vec4 a, b, c;
};

layout(std430) buffer TriangleBuffer {
	Tri triangles[];
};

Ray initRay(uint x, uint y) {
	
	Ray r;
	
	r.dir = normalize(texelFetch(directionTex, ivec2(x, y), 0).xyz);
	r.origin = texelFetch(positionTex, ivec2(x, y), 0).xyz;
	
	return r;
}

float hitTriangle(Ray ray, Tri tri) {

	vec3 v0 = tri.a.xyz;
	vec3 v1 = tri.b.xyz;
	vec3 v2 = tri.c.xyz;

	vec3 e1 = v1 - v0;
	vec3 e2 = v2 - v0;
	vec3 d = ray.dir;
	vec3 p = ray.origin;

	const float EPSILON = 0.0001f;

	vec3 h = cross(d, e2);
	float a = dot(e1, h);
	if (abs(a) < EPSILON) {
		return 1001.f;
	}

	float f = 1.f / a;
	vec3 s = p - v0;
	float u = f * dot(s, h);

	if (u < 0.f || u > 1.f) {
		return 1001.f;
	}

	vec3 q = cross(s, e1);
	float v = f * dot(d, q);

	if (v < 0.f || u + v > 1.f) {
		return 1001.f;
	}

	float t = f * dot(e2, q);

	if (t > EPSILON) {
		return t;
	}

	return 1001.f;

}

void main() {

	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;

	if (x < windowWidth && y < windowHeight) {
		
		vec4 color = vec4(1.0f, 0.0f, 0.0f, 0.0f);

		//Initialize the ray
		Ray r = initRay(x, y);

		float hit = 1000.f;
		int objHit = -1;
		float tmp;

		for (int i = 0; i < numTri; ++i) {
			tmp = hitTriangle(r, triangles[i]);
			if (tmp < hit && tmp > 0.f) {
				hit = tmp;
				objHit = i;
			}
		}

		if (hit < 1000.f) {
			imageStore(outputTexture, ivec2(x, y), vec4(hit / 20.f));
		} else {
			imageStore(outputTexture, ivec2(x, y), vec4(0.f, 0.f, 0.f, 0.f));
		}

		// imageStore(outputTexture, ivec2(x, y), vec4(triangles[1].b));

	}

}
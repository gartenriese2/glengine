#version 430 core

layout(local_size_x = 16, local_size_y = 16) in;

uniform int windowWidth;
uniform int windowHeight;
uniform int numObj;

uniform sampler2D positionTex;
uniform sampler2D directionTex;

layout (r11f_g11f_b10f, binding = 2) uniform image2D outputTexture;

struct Ray {
	vec3 origin;
	vec3 dir;
};

struct Primitive {
	vec4 A, B, C, D;
};

struct Object {
	Primitive p;
	vec4 type; // enum {QUADRILATERAL = 1, CIRCLE, CONE, CUBOID, SPHERE, SPLINE, TRIANGLE};
};

layout(std430) buffer PrimitiveBuffer {
	Object objects[];
};

Ray initRay(uint x, uint y) {
	
	Ray r;
	
	r.dir = normalize(texelFetch(directionTex, ivec2(x, y), 0).xyz);
	r.origin = texelFetch(positionTex, ivec2(x, y), 0).xyz;
	
	return r;
}

float hitTriangle(Ray ray, vec3 v0, vec3 v1, vec3 v2) {

	vec3 e1 = v1 - v0;
	vec3 e2 = v2 - v0;
	vec3 d = ray.dir;
	vec3 p = ray.origin;

	const float EPSILON = 0.0001f;

	vec3 h = cross(d, e2);
	float a = dot(e1, h);
	if (abs(a) < EPSILON) {
		return 1001.f;
	}

	float f = 1.f / a;
	vec3 s = p - v0;
	float u = f * dot(s, h);

	if (u < 0.f || u > 1.f) {
		return 1001.f;
	}

	vec3 q = cross(s, e1);
	float v = f * dot(d, q);

	if (v < 0.f || u + v > 1.f) {
		return 1001.f;
	}

	float t = f * dot(e2, q);

	if (t > EPSILON) {
		return t;
	}

	return 1001.f;

}

float hitQuadrilateral(Ray ray, Primitive prim) {

	vec3 v0 = prim.A.xyz;
	vec3 v1 = prim.B.xyz;
	vec3 v2 = prim.C.xyz;
	vec3 v3 = prim.D.xyz;

	return min(hitTriangle(ray, v0, v1, v3), hitTriangle(ray, v1, v2, v3));
	
}

float hitCuboid(Ray ray, Primitive prim) {

	vec4 A = prim.A;
	vec4 B = prim.B;
	vec4 C = prim.C;
	vec4 D = prim.D;

	vec4 AB = B - A;
	vec4 AC = C - A;
	vec4 AD = D - A;

	vec4 E = A + AB + AC;
	vec4 F = A + AC + AD;
	vec4 G = E + AD;
	vec4 H = B + AD;

	Primitive q1, q2, q3, q4, q5, q6;

	q1.A = A;
	q1.B = B;
	q1.C = E;
	q1.D = C;

	q2.A = D;
	q2.B = A;
	q2.C = C;
	q2.D = F;

	q3.A = H;
	q3.B = D;
	q3.C = F;
	q3.D = G;

	q4.A = B;
	q4.B = H;
	q4.C = G;
	q4.D = E;

	q5.A = C;
	q5.B = E;
	q5.C = G;
	q5.D = F;

	q6.A = B;
	q6.B = A;
	q6.C = D;
	q6.D = H;

	float t = 1001.f;
	t = min(t, hitQuadrilateral(ray, q1));
	t = min(t, hitQuadrilateral(ray, q2));
	t = min(t, hitQuadrilateral(ray, q3));
	t = min(t, hitQuadrilateral(ray, q4));
	t = min(t, hitQuadrilateral(ray, q5));
	t = min(t, hitQuadrilateral(ray, q6));

	return t;

}

float hitSphere(Ray ray, Primitive prim) {

	vec3 oc = ray.origin - prim.A.xyz;
	float s_roc = dot(ray.dir, oc);
	float s_oc = dot(oc, oc);
	
	float d = s_roc*s_roc - s_oc + prim.B.x*prim.B.x;

	if(d < 0){
		return 1001.f;
	} else if(d == 0) {
		if(-s_roc < 0){
			return 1001.f;
		}

		return -s_roc;
	} else {
		float t1 = 0, t2 = 0;
		
		t1 = sqrt(d);
		t2 = -s_roc-t1;
		t1 = -s_roc+t1;
		
		//ray origin lies in the sphere
		if( (t1 < 0 && t2 > 0)  || (t1 > 0 && t2 <0)){
			return 1001.f;
		}
		
		if( (t2>t1 ? t1 : t2) < 0){
			return 1001.f;
		} else {
			return (t2>t1 ? t1 : t2);
		}
	}

}

void main() {

	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;

	if (x < windowWidth && y < windowHeight) {
		
		vec4 color = vec4(1.0f, 0.0f, 0.0f, 0.0f);

		//Initialize the ray
		Ray r = initRay(x, y);

		float hit = 1000.f;
		int objHit = -1;
		float tmp;

		for (int i = 0; i < numObj; ++i) {
			switch(int(objects[i].type.x)) {
				case 1:
					tmp = hitQuadrilateral(r, objects[i].p);
					break;
				case 4:
					tmp = hitCuboid(r, objects[i].p);
					break;
				case 5:
					tmp = hitSphere(r, objects[i].p);
					break;
				default:
					tmp = 1001.f;
					break;
			}
			if (tmp < hit && tmp > 0.f) {
				hit = tmp;
				objHit = i;
			}
		}

		if (hit < 1000.f) {
			imageStore(outputTexture, ivec2(x, y), vec4(hit / 20.f));
		} else {
			imageStore(outputTexture, ivec2(x, y), vec4(0.f, 0.f, 0.f, 0.f));
		}

	}

}
#version 430 core

layout(local_size_x = 16, local_size_y = 16) in;

uniform uint windowWidth;
uniform uint windowHeight;
uniform int numTri;
uniform uint numLights;

uniform sampler2D positionTex;
uniform sampler2D directionTex;
uniform sampler2D colorTex;

layout (r11f_g11f_b10f, binding = 3) uniform image2D outputTexture;

struct Ray {
	vec3 origin;
	vec3 dir;
};

struct Tri {
	vec4 a, b, c;
};

struct Light {
	
	vec4 bools; // isEnabled, isLocal, isSpot, 0
	vec4 position;
	vec4 color;
	vec4 ambient;
	vec4 direction;
	vec4 attenuation; // constant, linear, quadratic, 0
	vec4 spot; // spotCosCutoff, spotExponent, 0, 0
	
};

layout(std430, binding = 0) buffer TriangleBuffer {
	Tri triangles[];
};

layout(std430, binding = 1) buffer LightBuffer {
	Light lights[];
};

Ray initRay(uint x, uint y) {
	
	Ray r;
	
	r.dir = normalize(texelFetch(directionTex, ivec2(x, y), 0).xyz);
	r.origin = texelFetch(positionTex, ivec2(x, y), 0).xyz;
	
	return r;
}

const float INFINITY = 10000.f;

float hitTriangle(Ray ray, Tri tri) {

	vec3 v0 = tri.a.xyz;
	vec3 v1 = tri.b.xyz;
	vec3 v2 = tri.c.xyz;

	vec3 e1 = v1 - v0;
	vec3 e2 = v2 - v0;
	vec3 d = ray.dir;
	vec3 p = ray.origin;

	const float EPSILON = 0.0001f;

	vec3 h = cross(d, e2);
	float a = dot(e1, h);
	if (abs(a) < EPSILON) {
		return INFINITY + 1.f;
	}

	float f = 1.f / a;
	vec3 s = p - v0;
	float u = f * dot(s, h);

	if (u < 0.f || u > 1.f) {
		return INFINITY + 1.f;
	}

	vec3 q = cross(s, e1);
	float v = f * dot(d, q);

	if (v < 0.f || u + v > 1.f) {
		return INFINITY + 1.f;
	}

	float t = f * dot(e2, q);

	if (t > EPSILON) {
		return t;
	}

	return INFINITY + 1.f;

}

vec4 calculateColor(Ray ray, uint x, uint y) {

	vec4 color = vec4(texelFetch(colorTex, ivec2(x, y), 0).xyz, 1.f) * 0.1f;

	vec3 scatteredLight = vec3(0.f);
	vec3 reflectedLight = vec3(0.f);

	for (int i = 0; i < numLights; ++i) {

		// turned off
		if (lights[i].bools.x == 0.f) continue;

		Ray rayToLight;
		rayToLight.origin = ray.origin;
		rayToLight.dir = normalize(lights[i].position.xyz - ray.origin);

		float hit = INFINITY;
		float tmp;
		for (int i = 0; i < numTri; ++i) {
			tmp = hitTriangle(rayToLight, triangles[i]);
			if (tmp < hit && tmp > 0.f) {
				hit = tmp;
			}
		}

		float distanceToLight = length(lights[i].position.xyz - ray.origin);
		if (distanceToLight > hit) continue; // in shadow

		color = vec4(texelFetch(colorTex, ivec2(x, y), 0).xyz, 1.f);

	}

	return color;

}

void main() {

	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;

	if (x < windowWidth && y < windowHeight) {
		
		

		//Initialize the ray
		Ray r = initRay(x, y);

		vec4 color = calculateColor(r, x, y);

		// float hit = INFINITY;
		// int triHit = -1;
		// float tmp;

		// for (int i = 0; i < numTri; ++i) {
		// 	tmp = hitTriangle(r, triangles[i]);
		// 	if (tmp < hit && tmp > 0.f) {
		// 		hit = tmp;
		// 		triHit = i;
		// 	}
		// }

		imageStore(outputTexture, ivec2(x, y), color);

	}

}